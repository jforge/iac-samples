// generated by cdk-dasm at 2020-01-15T10:32:30.203Z

import { Stack, StackProps, Construct, Fn } from '@aws-cdk/core';
import testcustomresourcewithlambda = require('@aws-cdk/aws-testcustomresourcewithlambda');
import lambda = require('@aws-cdk/aws-lambda');
import iam = require('@aws-cdk/aws-iam');

export class MyStack extends Stack {
    constructor(scope: Construct, id: string, props: StackProps = {}) {
        super(scope, id, props);
        new testcustomresourcewithlambda.Cfnundefined(this, 'TestCustomResource', {
            serviceToken: {
              "Fn::GetAtt": [
                "TestLambdaFunction",
                "Arn"
              ]
            },
            base: {
              "Ref": "Base"
            },
            id: {
              "Ref": "CustomResourceId"
            },
        });
        new lambda.CfnFunction(this, 'TestLambdaFunction', {
            handler: "index.handler",
            role: {
              "Fn::GetAtt": [
                "TestLambdaExecutionRole",
                "Arn"
              ]
            },
            code: {
              "zipFile": {
                "Fn::Join": [
                  "\n",
                  [
                    "from __future__ import print_function",
                    "import json",
                    "import cfnresponse",
                    "print('Loading function')",
                    "def handler(event, context):",
                    "   base = event['ResourceProperties']['Base']",
                    "   customId = event['ResourceProperties']['Id']",
                    "   outputData = {}",
                    "   isInt = True",
                    "   try:",
                    "      int(base)",
                    "   except ValueError:",
                    "      isInt = False",
                    "   except Exception as e:",
                    "      print(e)",
                    "      cfnresponse.send(event, context, cfnresponse.FAILED, { 'error': str(e) }, customId)",
                    "      return",
                    "   if event['RequestType'] != 'Delete' and isInt:",
                    "      outputData['Result'] = int(base) * 5",
                    "   if event['RequestType'] == 'Delete' or isInt:",
                    "      cfnresponse.send(event, context, cfnresponse.SUCCESS, outputData, customId)",
                    "   else:",
                    "      cfnresponse.send(event, context, cfnresponse.FAILED, outputData, customId)"
                  ]
                ]
              }
            },
            timeout: "10",
            memorySize: "256",
            runtime: "python2.7",
        });
        new iam.CfnRole(this, 'TestLambdaExecutionRole', {
            assumeRolePolicyDocument: {
              "version": "2012-10-17",
              "statement": [
                {
                  "effect": "Allow",
                  "principal": {
                    "service": [
                      "lambda.amazonaws.com"
                    ]
                  },
                  "action": [
                    "sts:AssumeRole"
                  ]
                }
              ]
            },
            path: "/",
            policies: [
              {
                "policyName": "cwlogs",
                "policyDocument": {
                  "version": "2012-10-17",
                  "statement": [
                    {
                      "effect": "Allow",
                      "action": "logs:CreateLogGroup",
                      "resource": {
                        "Fn::Join": [
                          ":",
                          [
                            "arn:aws:logs",
                            {
                              "Ref": "AWS::Region"
                            },
                            {
                              "Ref": "AWS::AccountId"
                            },
                            "*"
                          ]
                        ]
                      }
                    },
                    {
                      "effect": "Allow",
                      "action": [
                        "logs:CreateLogStream",
                        "logs:PutLogEvents"
                      ],
                      "resource": [
                        {
                          "Fn::Join": [
                            ":",
                            [
                              "arn:aws:logs",
                              {
                                "Ref": "AWS::Region"
                              },
                              {
                                "Ref": "AWS::AccountId"
                              },
                              "log-group",
                              "/aws/lambda/*",
                              "*"
                            ]
                          ]
                        }
                      ]
                    }
                  ]
                }
              }
            ],
        });
    }
}
