"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const AWS = require('aws-sdk');
const db = new AWS.DynamoDB.DocumentClient();
const TABLE_NAME = process.env.TABLE_NAME || '';
const PRIMARY_KEY = process.env.PRIMARY_KEY || '';
const RESERVED_RESPONSE = `Error: You're using AWS reserved keywords as attributes`, DYNAMODB_EXECUTION_ERROR = `Error: Execution update, caused a Dynamodb error, please take a look at your CloudWatch Logs.`;
exports.handler = async (event = {}) => {
    if (!event.body) {
        return { statusCode: 400, body: 'invalid request, you are missing the parameter body' };
    }
    const editedItemId = event.pathParameters.id;
    if (!editedItemId) {
        return { statusCode: 400, body: 'invalid request, you are missing the path parameter id' };
    }
    const editedItem = typeof event.body == 'object' ? event.body : JSON.parse(event.body);
    const editedItemProperties = Object.keys(editedItem);
    if (!editedItem || editedItemProperties.length < 1) {
        return { statusCode: 400, body: 'invalid request, no arguments provided' };
    }
    const firstProperty = editedItemProperties.splice(0, 1);
    const params = {
        TableName: TABLE_NAME,
        Key: {
            [PRIMARY_KEY]: editedItemId
        },
        UpdateExpression: `set ${firstProperty} = :${firstProperty}`,
        ExpressionAttributeValues: {},
        ReturnValues: 'UPDATED_NEW'
    };
    params.ExpressionAttributeValues[`:${firstProperty}`] = editedItem[`${firstProperty}`];
    editedItemProperties.forEach(property => {
        params.UpdateExpression += `, ${property} = :${property}`;
        params.ExpressionAttributeValues[`:${property}`] = editedItem[property];
    });
    try {
        await db.update(params).promise();
        return { statusCode: 204, body: '' };
    }
    catch (dbError) {
        const errorResponse = dbError.code === 'ValidationException' && dbError.message.includes('reserved keyword') ?
            DYNAMODB_EXECUTION_ERROR : RESERVED_RESPONSE;
        return { statusCode: 500, body: errorResponse };
    }
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXBkYXRlLW9uZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbInVwZGF0ZS1vbmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxNQUFNLEdBQUcsR0FBRyxPQUFPLENBQUMsU0FBUyxDQUFDLENBQUM7QUFDL0IsTUFBTSxFQUFFLEdBQUcsSUFBSSxHQUFHLENBQUMsUUFBUSxDQUFDLGNBQWMsRUFBRSxDQUFDO0FBQzdDLE1BQU0sVUFBVSxHQUFHLE9BQU8sQ0FBQyxHQUFHLENBQUMsVUFBVSxJQUFJLEVBQUUsQ0FBQztBQUNoRCxNQUFNLFdBQVcsR0FBRyxPQUFPLENBQUMsR0FBRyxDQUFDLFdBQVcsSUFBSSxFQUFFLENBQUM7QUFFbEQsTUFBTSxpQkFBaUIsR0FBRyx5REFBeUQsRUFDakYsd0JBQXdCLEdBQUcsK0ZBQStGLENBQUM7QUFFaEgsUUFBQSxPQUFPLEdBQUcsS0FBSyxFQUFFLFFBQWEsRUFBRSxFQUFrQixFQUFFO0lBRS9ELElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxFQUFFO1FBQ2YsT0FBTyxFQUFFLFVBQVUsRUFBRSxHQUFHLEVBQUUsSUFBSSxFQUFFLHFEQUFxRCxFQUFFLENBQUM7S0FDekY7SUFFRCxNQUFNLFlBQVksR0FBRyxLQUFLLENBQUMsY0FBYyxDQUFDLEVBQUUsQ0FBQztJQUM3QyxJQUFJLENBQUMsWUFBWSxFQUFFO1FBQ2pCLE9BQU8sRUFBRSxVQUFVLEVBQUUsR0FBRyxFQUFFLElBQUksRUFBRSx3REFBd0QsRUFBRSxDQUFDO0tBQzVGO0lBRUQsTUFBTSxVQUFVLEdBQVEsT0FBTyxLQUFLLENBQUMsSUFBSSxJQUFJLFFBQVEsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDNUYsTUFBTSxvQkFBb0IsR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDO0lBQ3JELElBQUksQ0FBQyxVQUFVLElBQUksb0JBQW9CLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTtRQUNoRCxPQUFPLEVBQUUsVUFBVSxFQUFFLEdBQUcsRUFBRSxJQUFJLEVBQUUsd0NBQXdDLEVBQUUsQ0FBQztLQUM5RTtJQUVELE1BQU0sYUFBYSxHQUFHLG9CQUFvQixDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLENBQUM7SUFDdkQsTUFBTSxNQUFNLEdBQVE7UUFDaEIsU0FBUyxFQUFFLFVBQVU7UUFDckIsR0FBRyxFQUFFO1lBQ0gsQ0FBQyxXQUFXLENBQUMsRUFBRSxZQUFZO1NBQzVCO1FBQ0QsZ0JBQWdCLEVBQUUsT0FBTyxhQUFhLE9BQU8sYUFBYSxFQUFFO1FBQzVELHlCQUF5QixFQUFFLEVBQUU7UUFDN0IsWUFBWSxFQUFFLGFBQWE7S0FDOUIsQ0FBQTtJQUNELE1BQU0sQ0FBQyx5QkFBeUIsQ0FBQyxJQUFJLGFBQWEsRUFBRSxDQUFDLEdBQUcsVUFBVSxDQUFDLEdBQUcsYUFBYSxFQUFFLENBQUMsQ0FBQztJQUV2RixvQkFBb0IsQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDcEMsTUFBTSxDQUFDLGdCQUFnQixJQUFJLEtBQUssUUFBUSxPQUFPLFFBQVEsRUFBRSxDQUFDO1FBQzFELE1BQU0sQ0FBQyx5QkFBeUIsQ0FBQyxJQUFJLFFBQVEsRUFBRSxDQUFDLEdBQUcsVUFBVSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBQzVFLENBQUMsQ0FBQyxDQUFDO0lBRUgsSUFBSTtRQUNGLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxPQUFPLEVBQUUsQ0FBQztRQUNsQyxPQUFPLEVBQUUsVUFBVSxFQUFFLEdBQUcsRUFBRSxJQUFJLEVBQUUsRUFBRSxFQUFFLENBQUM7S0FDdEM7SUFBQyxPQUFPLE9BQU8sRUFBRTtRQUNoQixNQUFNLGFBQWEsR0FBRyxPQUFPLENBQUMsSUFBSSxLQUFLLHFCQUFxQixJQUFJLE9BQU8sQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLGtCQUFrQixDQUFDLENBQUMsQ0FBQztZQUM5Ryx3QkFBd0IsQ0FBQyxDQUFDLENBQUMsaUJBQWlCLENBQUM7UUFDN0MsT0FBTyxFQUFFLFVBQVUsRUFBRSxHQUFHLEVBQUUsSUFBSSxFQUFFLGFBQWEsRUFBRSxDQUFDO0tBQ2pEO0FBQ0gsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgQVdTID0gcmVxdWlyZSgnYXdzLXNkaycpO1xuY29uc3QgZGIgPSBuZXcgQVdTLkR5bmFtb0RCLkRvY3VtZW50Q2xpZW50KCk7XG5jb25zdCBUQUJMRV9OQU1FID0gcHJvY2Vzcy5lbnYuVEFCTEVfTkFNRSB8fCAnJztcbmNvbnN0IFBSSU1BUllfS0VZID0gcHJvY2Vzcy5lbnYuUFJJTUFSWV9LRVkgfHwgJyc7XG5cbmNvbnN0IFJFU0VSVkVEX1JFU1BPTlNFID0gYEVycm9yOiBZb3UncmUgdXNpbmcgQVdTIHJlc2VydmVkIGtleXdvcmRzIGFzIGF0dHJpYnV0ZXNgLFxuICBEWU5BTU9EQl9FWEVDVVRJT05fRVJST1IgPSBgRXJyb3I6IEV4ZWN1dGlvbiB1cGRhdGUsIGNhdXNlZCBhIER5bmFtb2RiIGVycm9yLCBwbGVhc2UgdGFrZSBhIGxvb2sgYXQgeW91ciBDbG91ZFdhdGNoIExvZ3MuYDtcblxuZXhwb3J0IGNvbnN0IGhhbmRsZXIgPSBhc3luYyAoZXZlbnQ6IGFueSA9IHt9KSA6IFByb21pc2UgPGFueT4gPT4ge1xuXG4gIGlmICghZXZlbnQuYm9keSkge1xuICAgIHJldHVybiB7IHN0YXR1c0NvZGU6IDQwMCwgYm9keTogJ2ludmFsaWQgcmVxdWVzdCwgeW91IGFyZSBtaXNzaW5nIHRoZSBwYXJhbWV0ZXIgYm9keScgfTtcbiAgfVxuXG4gIGNvbnN0IGVkaXRlZEl0ZW1JZCA9IGV2ZW50LnBhdGhQYXJhbWV0ZXJzLmlkO1xuICBpZiAoIWVkaXRlZEl0ZW1JZCkge1xuICAgIHJldHVybiB7IHN0YXR1c0NvZGU6IDQwMCwgYm9keTogJ2ludmFsaWQgcmVxdWVzdCwgeW91IGFyZSBtaXNzaW5nIHRoZSBwYXRoIHBhcmFtZXRlciBpZCcgfTtcbiAgfVxuXG4gIGNvbnN0IGVkaXRlZEl0ZW06IGFueSA9IHR5cGVvZiBldmVudC5ib2R5ID09ICdvYmplY3QnID8gZXZlbnQuYm9keSA6IEpTT04ucGFyc2UoZXZlbnQuYm9keSk7XG4gIGNvbnN0IGVkaXRlZEl0ZW1Qcm9wZXJ0aWVzID0gT2JqZWN0LmtleXMoZWRpdGVkSXRlbSk7XG4gIGlmICghZWRpdGVkSXRlbSB8fCBlZGl0ZWRJdGVtUHJvcGVydGllcy5sZW5ndGggPCAxKSB7XG4gICAgICByZXR1cm4geyBzdGF0dXNDb2RlOiA0MDAsIGJvZHk6ICdpbnZhbGlkIHJlcXVlc3QsIG5vIGFyZ3VtZW50cyBwcm92aWRlZCcgfTtcbiAgfVxuXG4gIGNvbnN0IGZpcnN0UHJvcGVydHkgPSBlZGl0ZWRJdGVtUHJvcGVydGllcy5zcGxpY2UoMCwxKTtcbiAgY29uc3QgcGFyYW1zOiBhbnkgPSB7XG4gICAgICBUYWJsZU5hbWU6IFRBQkxFX05BTUUsXG4gICAgICBLZXk6IHtcbiAgICAgICAgW1BSSU1BUllfS0VZXTogZWRpdGVkSXRlbUlkXG4gICAgICB9LFxuICAgICAgVXBkYXRlRXhwcmVzc2lvbjogYHNldCAke2ZpcnN0UHJvcGVydHl9ID0gOiR7Zmlyc3RQcm9wZXJ0eX1gLFxuICAgICAgRXhwcmVzc2lvbkF0dHJpYnV0ZVZhbHVlczoge30sXG4gICAgICBSZXR1cm5WYWx1ZXM6ICdVUERBVEVEX05FVydcbiAgfVxuICBwYXJhbXMuRXhwcmVzc2lvbkF0dHJpYnV0ZVZhbHVlc1tgOiR7Zmlyc3RQcm9wZXJ0eX1gXSA9IGVkaXRlZEl0ZW1bYCR7Zmlyc3RQcm9wZXJ0eX1gXTtcblxuICBlZGl0ZWRJdGVtUHJvcGVydGllcy5mb3JFYWNoKHByb3BlcnR5ID0+IHtcbiAgICAgIHBhcmFtcy5VcGRhdGVFeHByZXNzaW9uICs9IGAsICR7cHJvcGVydHl9ID0gOiR7cHJvcGVydHl9YDtcbiAgICAgIHBhcmFtcy5FeHByZXNzaW9uQXR0cmlidXRlVmFsdWVzW2A6JHtwcm9wZXJ0eX1gXSA9IGVkaXRlZEl0ZW1bcHJvcGVydHldO1xuICB9KTtcblxuICB0cnkge1xuICAgIGF3YWl0IGRiLnVwZGF0ZShwYXJhbXMpLnByb21pc2UoKTtcbiAgICByZXR1cm4geyBzdGF0dXNDb2RlOiAyMDQsIGJvZHk6ICcnIH07XG4gIH0gY2F0Y2ggKGRiRXJyb3IpIHtcbiAgICBjb25zdCBlcnJvclJlc3BvbnNlID0gZGJFcnJvci5jb2RlID09PSAnVmFsaWRhdGlvbkV4Y2VwdGlvbicgJiYgZGJFcnJvci5tZXNzYWdlLmluY2x1ZGVzKCdyZXNlcnZlZCBrZXl3b3JkJykgP1xuICAgIERZTkFNT0RCX0VYRUNVVElPTl9FUlJPUiA6IFJFU0VSVkVEX1JFU1BPTlNFO1xuICAgIHJldHVybiB7IHN0YXR1c0NvZGU6IDUwMCwgYm9keTogZXJyb3JSZXNwb25zZSB9O1xuICB9XG59O1xuIl19